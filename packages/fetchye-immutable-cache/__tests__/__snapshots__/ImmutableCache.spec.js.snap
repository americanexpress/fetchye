// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ImmutableCache accepts a cacheSelector 1`] = `
Immutable.Map {
  "errors": Immutable.Map {
    "def5678": [Error: Fake Error],
  },
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache getCacheByKey returns empty data error loading if cache undefined 1`] = `
Object {
  "data": undefined,
  "error": undefined,
  "loading": false,
}
`;

exports[`ImmutableCache reflects load state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {},
  "loading": Immutable.Set [
    "abc1234",
  ],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache reflects load to error state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {
    "abc1234": [Error: Fake Error],
  },
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache reflects load to error to clear errors state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {},
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache reflects load to success state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {},
  "loading": Immutable.Set [],
  "data": Immutable.Map {
    "abc1234": Object {
      "body": Object {
        "fakeData": true,
      },
      "ok": true,
      "status": 200,
    },
  },
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache reflects load to success to delete state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {},
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache reflects multiple hashes stored 1`] = `
Immutable.Map {
  "errors": Immutable.Map {
    "def5678": [Error: Fake Error],
  },
  "loading": Immutable.Set [],
  "data": Immutable.Map {
    "abc1234": Object {
      "body": Object {
        "fakeData": true,
      },
      "ok": true,
      "status": 200,
    },
  },
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache returns default cacheSelector 1`] = `
Immutable.Map {
  "errors": Immutable.Map {
    "def5678": [Error: Fake Error],
  },
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache returns default state if unknown @fetchye action type 1`] = `
Immutable.Map {
  "errors": Immutable.Map {},
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache should reflect load to error to success state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {},
  "loading": Immutable.Set [],
  "data": Immutable.Map {
    "abc1234": Object {
      "body": Object {
        "fakeData": true,
      },
      "ok": true,
      "status": 200,
    },
  },
  "query": Immutable.Map {},
}
`;

exports[`ImmutableCache should reflect load to success to error state 1`] = `
Immutable.Map {
  "errors": Immutable.Map {
    "abc1234": [Error: Fake Error],
  },
  "loading": Immutable.Set [],
  "data": Immutable.Map {},
  "query": Immutable.Map {},
}
`;
